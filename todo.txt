TODO, priority list

- architect how the instances get generated, possibly w/ generator funcs instead of hard-coded
- get recursive data-types in there
- classes
- run on the `learn` function
- learn about containers & set up sandboxing
- set up a nice interfact to interact w. the tool & maybe some automation



- find motivating example codebases
- write instance functions to cover more types
- pull out of jupypter into script
   ie, workflow is: pass in module, or file (as long as all deps are present) or name of function
- test cases



December 19th, plan of action:
1. find (simple) codebase
2. use that to rearchitect the code
3. write tests
4. work on extentions



January 3 2019
1. Implemented classes (no nested classes allowed!)
2. Did some code cleanup

Future todo:
1. Tests
2. Get types from type definitions and use these to limit search space
3. Get default parameters from named parameters in functions and use these
4. Result printing for classes
5. Multiple successful class instances
6. Once we have a set of benchmarks, make sure performance is acceptable / improve search strategies
